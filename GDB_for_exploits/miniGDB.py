import tkinter as tk
from tkinter import messagebox, scrolledtext
import subprocess
import platform
import docker
import threading
import io
import os
import re

# --- Configuration ---
# name for our custom Docker image
IMAGE_NAME = "exploit-lab:latest"

# blueprint for our disposable environment.
DOCKERFILE_CONTENT = """
# Start from Ubuntu 20.04 - Docker automatically picks the right architecture.
FROM ubuntu:20.04

# Avoid interactive prompts during installation
ENV DEBIAN_FRONTEND=noninteractive

# Update package lists and install a curated set of essential tools for both Python 2 and 3
RUN apt-get update && \\
    apt-get install -y \\
    gdb \\
    python2 \\
    python3 \\
    python3-pip \\
    curl \\
    build-essential \\
    nano \\
    vim \\
    git \\
    procps \\
    net-tools \\
    iputils-ping \\
    wget && \\
    # Download the installation script for pip for Python 2.7
    curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py && \\
    # Run the script to install pip for python2
    python2 get-pip.py && \\
    # Create a symbolic link so 'python' command runs python2 for legacy compatibility
    ln -s /usr/bin/python2 /usr/bin/python && \\
    # Clean up to keep the image small
    apt-get clean && \\
    rm -rf /var/lib/apt/lists/* /get-pip.py

# Set the default command to start an interactive bash shell when the container runs
CMD ["/bin/bash"]
"""

# --- Helper Function ---
def strip_ansi_codes(text):
    """Removes ANSI escape codes (used for terminal colors/formatting) from a string."""
    ansi_escape = re.compile(r'\x1B(?:[@-Z\\-_]|\[[0-?]*[ -/]*[@-~])')
    return ansi_escape.sub('', text)

def log_message(widget, message):
    """Inserts a message into the log widget, making it temporarily writable."""
    widget.config(state=tk.NORMAL)
    widget.insert(tk.END, message)
    widget.see(tk.END)
    widget.config(state=tk.DISABLED)

# --- Main Application Logic ---

def launch_lab_environment(log_widget, button, root_window):
    """Checks for the Docker image, builds it if needed, then launches the container."""
    # Disable the button to prevent multiple clicks
    button.config(state=tk.DISABLED)

    try:
        log_message(log_widget, "Connecting to Docker...\n")
        client = docker.from_env()
        client.ping()
    except Exception as e:
        messagebox.showerror(
            "Docker Error",
            "Could not connect to Docker. Is Docker Desktop running?\n\n"
            f"Error: {e}"
        )
        log_message(log_widget, "Failed to connect to Docker. Please start Docker Desktop.\n")
        button.config(state=tk.NORMAL) # Re-enable button on error
        return

    log_message(log_widget, f"Checking if image '{IMAGE_NAME}' exists...\n")

    try:
        client.images.get(IMAGE_NAME)
        log_message(log_widget, "Image found. Ready to launch.\n")
    except docker.errors.ImageNotFound:
        log_message(log_widget, "Image not found. Building it now...\n")
        log_message(log_widget, "(This may take a few minutes, please be patient...)\n")
        try:
            build_generator = client.api.build(
                fileobj=io.BytesIO(DOCKERFILE_CONTENT.encode('utf-8')),
                tag=IMAGE_NAME,
                rm=True,
                decode=True
            )

            for chunk in build_generator:
                if 'stream' in chunk:
                    line = chunk['stream'].strip()
                    if line:
                        clean_line = strip_ansi_codes(line)
                        log_message(log_widget, clean_line + '\n')
                if 'error' in chunk:
                    error_message = chunk.get('errorDetail', {}).get('message', 'Unknown build error.')
                    log_message(log_widget, f"ERROR: {error_message}\n")
                    messagebox.showerror("Build Failed", f"Failed to build Docker image:\n{error_message}")
                    button.config(state=tk.NORMAL)
                    return

            log_message(log_widget, "\nBuild complete!\n")

        except Exception as e:
            messagebox.showerror("An Unexpected Error Occurred", f"An error occurred during the build: {e}")
            log_message(log_widget, f"An unexpected error occurred: {e}\n")
            button.config(state=tk.NORMAL)
            return

    # --- Launch the container in a new terminal window ---
    log_message(log_widget, "Launching lab in a new terminal window...\n")

    command = f"docker run --rm -it {IMAGE_NAME}"
    current_os = platform.system()
    
    try:
        # Get the position of the main window at the last possible moment
        x_pos = root_window.winfo_x()
        y_pos = root_window.winfo_y()

        if current_os == "Windows":
            # The terminal will open at the system's default location.
            subprocess.run(f'start cmd /K "{command}"', shell=True)
        elif current_os == "Darwin": # macOS
            # set the position of the new Terminal window
            script = f'tell app "Terminal" to set w to do script "{command}"\n' \
                     f'tell app "Terminal" to set position of w to {{{x_pos}, {y_pos}}}'
            subprocess.run(["osascript", "-e", script])
        else:
            subprocess.run(["gnome-terminal", f"--geometry=+{x_pos}+{y_pos}", "--", "bash", "-c", f"{command}; exec bash"])
        
        log_message(log_widget, "Terminal launched. This window will now close.\n")
        root_window.after(2000, root_window.destroy)

    except Exception as e:
        messagebox.showerror("Terminal Error", f"Could not open a new terminal window: {e}")
        log_message(log_widget, f"Failed to launch terminal: {e}\n")
        button.config(state=tk.NORMAL)

def main():
    """Sets up the GUI window."""
    window = tk.Tk()
    window.title("Disposable Exploit Lab Launcher")
    window.geometry("600x400")

    arch = platform.machine()

    info_frame = tk.Frame(window, padx=10, pady=10)
    info_frame.pack(fill=tk.X)

    title_label = tk.Label(info_frame, text="Disposable Exploit Lab Environment", font=("Helvetica", 16))
    title_label.pack()

    info_label = tk.Label(
        info_frame,
        text=f"Your System Architecture: {arch}\n"
             "This script will create a self-destructing Ubuntu container.",
        justify=tk.CENTER
    )
    info_label.pack(pady=5)

    log_frame = tk.Frame(window, padx=10, pady=5)
    log_frame.pack(fill=tk.BOTH, expand=True)
    
    log_widget = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, height=10)
    log_widget.pack(fill=tk.BOTH, expand=True)
    
    # log widget read-only
    log_message(log_widget, "Welcome! Click the button to start.\n")
    log_widget.config(state=tk.DISABLED)

    launch_button = tk.Button(
        window,
        text="ðŸš€ Launch Disposable Lab",
        font=("Helvetica", 12),
        command=lambda: threading.Thread(
            target=launch_lab_environment,
            args=(log_widget, launch_button, window),
            daemon=True
        ).start()
    )
    launch_button.pack(pady=10)

    window.mainloop()

if __name__ == "__main__":
    main()

